using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Mollie.Api.Models.Connect.Request;
using Mollie.Api.Models.Connect.Response;

namespace Mollie.Api.Client.Abstract {
    public interface IConnectClient : IDisposable
    {
        /// <summary>
        ///     Constructs the Authorize URL for the Authorize endpoint from the parameters
        /// </summary>
        /// <param name="state">A random string generated by your app to prevent CSRF attacks.</param>
        /// <param name="scopes">
        ///     A space separated list of permissions your app requires. Refer to OAuth: Permissions for more
        ///     information about the available scopes.
        /// </param>
        /// <param name="redirectUri">
        ///     The URL the merchant is sent back to once the request has been authorized. If given, it must
        ///     match the URL you set when registering your app.
        /// </param>
        /// <param name="forceApprovalPrompt">
        ///     This parameter can be set to force, to force showing the consent screen to the
        ///     merchant, even when it is not necessary
        /// </param>
        /// <param name="locale">
        ///     Allows you to preset the language to be used in the login / sign up / authorize flow if the merchant is not known by Mollie.
        ///     When this parameter is omitted, the browser language will be used instead.
        ///     You can provide any ISO 15897 locale, but the authorize flow currently only supports the following languages:
        ///     Possible values: en_US nl_NL nl_BE fr_FR fr_BE de_DE es_ES it_IT
        /// </param>
        ///  <param name="landingPage">
        ///     Allows you to specify if Mollie should show the login or the signup page, when the merchant is not logged in at Mollie.
        ///     Defaults to the login page. Defaults to login.
        /// </param>
        /// <returns>The url to the mollie consent screen.</returns>
        string GetAuthorizationUrl(
            string state,
            List<string> scopes,
            string? redirectUri = null,
            bool forceApprovalPrompt = false,
            string? locale = null,
            string? landingPage = null);

        /// <summary>
        /// Exchange the auth code received at the Authorize endpoint for an actual access token, with which you can
        /// communicate with the Mollie API. Or Refresh the accestoken
        /// </summary>
        /// <param name="request"></param>
        /// <returns>An token object.</returns>
        Task<TokenResponse> GetAccessTokenAsync(TokenRequest request);

        /// <summary>
        /// Revoke an access- or a refresh token. Once revoked the token can not be used anymore.
        /// </summary>
        /// <param name="request"></param>
        /// <returns></returns>
        Task RevokeTokenAsync(RevokeTokenRequest request);
    }
}
